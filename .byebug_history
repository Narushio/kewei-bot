exit
stream
exit
stream
exit
data.dig("urls", "regular")
url
download_pic(data.dig("urls", "regular")) { |file| Base64.strict_encode64(file.read) }
c
download_pic(data.dig("urls", "regular")) { |file| Base64.strict_encode64(file.read) }
c
exit
@group_features.flatten.sort {_1[:level]}
@group_features
c
functions[0][:proc].call(message, message.text.gsub("可畏", ""))
functions[0][:proc].call(message, text)
functions[0][:proc]
functions[0][:level]
functions[0].level
functions
funtions
exit
functions.functions.each |function| function[:proc]; end
functions.functions[:proc]
functions.functions
functions[:level]
functions.level
functions
@group_functions
c
data = JSON.parse(@conn.post(nil, params.to_json).body).dig("data", 0)
$2.nil? || $2 == ""
c
exit
data
exit
 data.dig("urls, original")
message_chain
c
message_chain
c
message_chain
c
message_chain
c
message_chain
messgae_chain
c
message_chain
c
message_chain
c
message_chain
c
message_chain
c
data
c
data
exit
data
c
Mah::BotEvent.send_group_message(message, message_chain)
        message_chain = Mah::Chain.forword([
          Mah::Chain.plain("Title: #{data["title"]}\n"),
          Mah::Chain.plain("Author: #{data["author"]}\n")
        ])
Mah::BotEvent.send_group_message(message, message_chain)
        message_chain = [
          Mah::Chain.plain("Title: #{data["title"]}\n"),
          Mah::Chain.plain("Author: #{data["author"]}\n"),
          Mah::Chain.image(url: data.dig("urls", "original").to_s.gsub("i.pixiv.cat", "i.pixiv.re"))
        ]
Mah::BotEvent.send_group_message(message, message_chain)
message_chain
c
data
c
      message_chain = [
        Mah::Chain.plain("Title: #{data["title"]}\n"),
        Mah::Chain.plain("Author: #{data["author"]}\n"),
        Mah::Chain.image(url: data.dig("urls", "original").to_s.gsub("i.pixiv.cat", "i.pixiv.re"))
      ]
      Mah::BotEvent.send_group_message(message, message_chain)
data
c
        data = JSON.parse(@conn.post do |request|
          request.body = params.to_json
        end.body)["data"][0]
params
params[:tag] = options.join("|") if options.join("|") != ""
params
params[:r18] = 1 if options.delete("r18") == "r18"
c
exit
$2.nil? && $2 == ""
exit
text.match(/\A(色图|涩图|🐍图)(.*)/)
exit
 data = JSON.parse(@conn.post do |request|
   request.body = params.to_json          
 end.body)["data"][0]                     
data = JSON.parse(@conn.post do |request|
  request.body = params.as_json          
end.body)["data"][0]                     
exit
params.as_json
params
params.to_s
params
params.to_yaml
params.to_symbol
params.to_syb
params.to_sym
JSON.parse(params)
params.class
params.to_json
params
c
$2
exit
load
reload
text
text.match(/\A(色图)|(涩图)|(🐍图) (.*)/)[2]
text.match(/\A(色图)|(涩图)|(🐍图) (.*)/)[1]
text.match(/\A(色图)|(涩图)|(🐍图) (.*)/)[0]
$2
$3
$5
$4
$0
$1
$3
$
$2
$1
c
return nil unless check_prefix_command(message)
c
c 
c
data
c
data
c
message_chain
message_china
data
exit
message_chain
c
data
c
data
c
data.to_json
data
c
data
exit
text
exit
data["pid"].to_s
data
c
data
c
data
c
data
c
data
c
data
c
data
c
data
c
data
c
Dir["*"]
Dir.pwd
Dir.chdir("resource/images/emoji")
Dir.pwd
c
Bot.current_ws.send(data.to_json)
data = {
        syncId: 1,
        command: "sendGroupMessage",
        subCommand: nil,
        content: {
          sessionKey: Bot.current_session,
          target: 724082984,
          messageChain: message_chain
        }
      }
Bot.current_ws.send(data.to_json)
        data = {
          syncId: 123,
          command: "sendFriendMessage",
          subCommand: nil,
          content: {
            sessionKey: Bot.current_session,
            target: super_admin,
            messageChain: [message_chain]
          }
        }
Bot.current_ws.send(data.to_json)
        data = {
          syncId: 123,
          command: "sendFriendMessage",
          subCommand: nil,
          content: {
            sessionKey: Bot.current_session,
            target: super_admin,
            messageChain: message_chain
          }
        }
Bot.current_ws.send(data.to_json)
data
c
Settings.bot.superAdmins
c
Bot.current_session
Bot.current_ws
exit
Bot.instance_eval "def current_ws; #{@bot.ws}; e
Bot.instance_eval "def current_ws; #{@bot.ws}; end"
Bot
kclass
@bot.class.instance_eval "def current_ws; return @bot.ws; end"
Bot.current_ws
@bot.ws
@bot.class.instance_eval "def current_ws; @bot.ws; end"
@bot.class
@bot
Bot.current_session
@bot.current_session
@bot.session
@bot
exit
Bot.current_session
Bot.current_ws
Bot.ws
exit
kclass.ws
kclass.es
kclass
exit
Bot.current_ws
kclass.current_ws
kclass.ws
kclass
